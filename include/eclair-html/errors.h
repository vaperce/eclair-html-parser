#ifndef ECLAIR_HTML_ERRORS
#define ECLAIR_HTML_ERRORS

#include <string>
#include <vector>

namespace eclair_html {
namespace html_parser {

  enum class ErrorKinds {
    ABRUPT_CLOSING_OF_EMPTY_COMMENT = 0,
    ABRUPT_DOCTYPE_PUBLIC_IDENTIFIER,
    ABRUPT_DOCTYPE_SYSTEM_IDENTIFIER,
    ABSENCE_OF_DIGITS_IN_NUMERIC_CHARACTER_REFERENCE,
    CDATA_IN_HTML_CONTENT,
    CHARACTER_REFERENCE_OUTSIDE_UNICODE_RANGE,
    CONTROL_CHARACTER_IN_INPUT_STREAM,
    CONTROL_CHARACTER_REFERENCE,
    END_TAG_WITH_ATTRIBUTES,
    DUPLICATE_ATTRIBUTE,
    END_TAG_WITH_TRAILING_SOLIDUS,
    EOF_BEFORE_TAG_NAME,
    EOF_IN_CDATA,
    EOF_IN_COMMENT,
    EOF_IN_DOCTYPE,
    EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT,
    EOF_IN_TAG,
    INCORRECTLY_CLOSED_COMMENT,
    INCORRECTLY_OPENED_COMMENT,
    INVALID_CHARACTER_SEQUENCE_AFTER_DOCTYPE_NAME,
    INVALID_FIRST_CHARACTER_OF_TAG_NAME,
    MISSING_ATTRIBUTE_VALUE,
    MISSING_DOCTYPE_NAME,
    MISSING_DOCTYPE_PUBLIC_IDENTIFIER,
    MISSING_DOCTYPE_SYSTEM_IDENTIFIER,
    MISSING_END_TAG_NAME,
    MISSING_QUOTE_BEFORE_DOCTYPE_PUBLIC_IDENTIFIER,
    MISSING_QUOTE_BEFORE_DOCTYPE_SYSTEM_IDENTIFIER,
    MISSING_SEMICOLON_AFTER_CHARACTER_REFERENCE,
    MISSING_WHITESPACE_AFTER_DOCTYPE_PUBLIC_KEYWORD,
    MISSING_WHITESPACE_AFTER_DOCTYPE_SYSTEM_KEYWORD,
    MISSING_WHITESPACE_BEFORE_DOCTYPE_NAME,
    MISSING_WHITESPACE_BETWEEN_ATTRIBUTES,
    MISSING_WHITESPACE_BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS,
    NESTED_COMMENT,
    NONCHARACTER_CHARACTER_REFERENCE,
    NONCHARACTER_IN_INPUT_STREAM,
    NON_VOID_HTML_ELEMENT_START_TAG_WITH_TRAILING_SOLIDUS,
    NULL_CHARACTER_REFERENCE,
    SURROGATE_CHARACTER_REFERENCE,
    SURROGATE_IN_INPUT_STREAM,
    UNEXPECTED_CHARACTER_AFTER_DOCTYPE_SYSTEM_IDENTIFIER,
    UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME,
    UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE,
    UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME,
    UNEXPECTED_NULL_CHARACTER,
    UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME,
    UNEXPECTED_SOLIDUS_IN_TAG,
    UNKNOWN_NAMED_CHARACTER_REFERENCE,
    UNEXPECTED_TAG,
    UNEXPECTED_TEXT,
  };

  class Error {
  public:
    explicit Error(ErrorKinds kind, unsigned line, unsigned lineOffset)
      : _kind(kind), _line(line), _lineOffset(lineOffset) {
    }

    ErrorKinds kind() const {
      return _kind;
    }

    unsigned line() const {
      return _line;
    }

    unsigned lineOffset() const {
      return _lineOffset;
    }

    const std::string& name() const {
      return _NAMES[static_cast<int>(_kind)];
    }

  private:
    static const std::vector<std::string> _NAMES;

    ErrorKinds _kind;

    unsigned _line;
    unsigned _lineOffset;
  };

  typedef std::vector<Error> Errors;

}
}

#endif
